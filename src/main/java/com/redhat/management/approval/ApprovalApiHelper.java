package com.redhat.management.approval;

import java.io.Serializable;

import java.util.TimeZone;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class ApprovalApiHelper implements java.io.Serializable {

    static final long serialVersionUID = 1L;

    private final static String DATE_FORMAT_1 = "yyyy-MM-dd'T'HH:mm:ss'Z'";
    private final static String DATE_FORMAT_2 = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
    private final static String SKIP = "{\"operation\": \"skip\", \"processed_by\": \"system\"}";
    private final static String NOTIFY = "{\"operation\": \"notify\", \"processed_by\": \"system\"}";

    public final static int SUCCEEDED = 0;
    public final static int PARSE_REQUEST_ERROR = 1;
    public final static int PARSE_GROUP_ERROR = 2;
    public final static int PARSE_EMAIL_ERROR = 3;
    public final static int PARSE_HEADER_URL_ERROR = 4;

    public static String formatDate(String pattern, String timeStr) throws Exception {
        DateFormat df = new SimpleDateFormat(pattern);
        return df.format(getDate(timeStr));
    }

    public static Date getDate(String timeStr) throws Exception {
        Date date = getDate(timeStr, DATE_FORMAT_1);
        if (date == null) {
            date = getDate(timeStr, DATE_FORMAT_2);
        }

        if (date == null) {
            throw new Exception("Cannot parse: " + timeStr);
        }
        return date;
    }

    private static Date getDate(String timeStr, String format) {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        sdf.setLenient(false);
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        Date requestDate = null;

        try {
            requestDate = sdf.parse(timeStr); 
        }
        catch (ParseException e) {
            //do nothing, return null
        }
        return requestDate;
    }

    // Used in bpmn
    public static String getRequestContent(String decision) {
        return isRequestSkippable(decision) ? SKIP : NOTIFY;
    }
    
    public static String getRequestErrorContent(String reason) {
        return "{\"operation\": \"error\", \"processed_by\": \"system\", \"comments\": \"" + reason + "\"}";
    }

    // Used in bpmn
    public static String getRequestUrl(Request request) {
        String apiUrl = System.getenv("APPROVAL_API_URL");
        return apiUrl + "/api/approval/v1.0/requests/"+ request.getId() +"/actions";
    }

    public static boolean isRequestSkippable(String action) {
        return (action.equals("denied") || action.equals("canceled"));
    }
}
