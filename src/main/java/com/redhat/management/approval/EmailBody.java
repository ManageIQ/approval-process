package com.redhat.management.approval;

import java.io.IOException;
import java.io.Serializable;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import java.util.Map;
import java.util.HashMap;
import java.net.URL;
import java.net.URLConnection;
import org.apache.commons.lang3.text.StrSubstitutor;
import org.apache.commons.lang3.StringUtils;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class EmailBody implements Serializable {
    static final long serialVersionUID = 1L;
    private static String templateFile = "AnsibleCatalogEmailTemplate.html";

    private Approver approver;
    private Group group;
    private Request request;

    public String getEmailTemplate() {
        URL url = EmailBody.class.getResource(templateFile);

        String content = "";
        Logger log = Logger.getLogger(request.getInsightsRequestId());
        try {
            content = getUrlContent(url);
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }
        return content;
    }

    public Map<String, String> getRequestParameters() {
        Map<String, Object> requestContent = getContent();

        Map<String, String> values = new HashMap<String, String>();
        values.put("approver_name", approver.getFirstName() + " " + approver.getLastName());
        values.put("requester_name", getIdentityFullName());
        values.put("orderer_email", getIdentityEmail());
        values.put("order_id", requestContent.get("order_id").toString());
        values.put("product", requestContent.get("product").toString());
        values.put("portfolio", requestContent.get("portfolio").toString());
        values.put("platform", requestContent.get("platform").toString());

        String webUrl = System.getenv("APPROVAL_WEB_URL");
        String approveLink = String.format("%s%s/stageaction/%s", webUrl,
            ApprovalApiHelper.APPROVAL_API_BASE_PATH, approver.getRandomAccessKey());
        values.put("approve_link", approveLink);
        values.put("web_url", webUrl);
        values.put("approval_id", getApprovalId());

        Logger log = Logger.getLogger(request.getInsightsRequestId());
        try {
            String date = ApprovalApiHelper.formatDate("dd MMM yyyy", getCreatedTime());
            String time = ApprovalApiHelper.formatDate("HH:mm:ss", getCreatedTime());
            values.put("order_date", date);
            values.put("order_time", time);
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }

        return values;
    }

    public Approver getApprover() {
        return this.approver;
    }

    public void setApprover(Approver approver) {
        this.approver = approver;
    }

    public Group getGroup() {
        return this.group;
    }

    public void setGroup(Group group) {
        this.group = group;
    }

    public Request getRequest() {
        return this.request;
    }

    public void setRequest(Request request) {
        this.request = request;
    }

    public EmailBody(Approver approver, Group group, Request request) {
        this.approver = approver;
        this.group = group;
        this.request = request;
    }

    public String toString() {
        String template = getEmailTemplate();
        Map<String, String> values = getRequestParameters();

        StrSubstitutor sub = new StrSubstitutor(values);
        return sub.replace(template);
    }
    
    public Map<String, Object> getContent() {
        return request.getContent();
    }
    
    public String getIdentityFullName() {
        return  request.getIdentityFullName().toString();
    }
    
    public String getIdentityEmail() {
        return  request.getIdentityEmail();
    }

    public String getApprovalId() {
        return  request.getParentId();
    }
    
    public String getCreatedTime() {
        return  request.getCreatedTime();
    }
    
    private static String getUrlContent(URL url) throws IOException {
        URLConnection connection = url.openConnection();
        BufferedReader in = new BufferedReader(
                              new InputStreamReader(
                                connection.getInputStream()));

        StringBuilder content = new StringBuilder();
        String inputLine;

        try {
            while ((inputLine = in.readLine()) != null) 
                content.append(inputLine);
        }
        finally {
            in.close();
        }

        return content.toString();
    }
}
